package com.bookshop.ctrl;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bookshop.biz.MemberService;
import com.bookshop.domain.Member;

@Controller
@RequestMapping("/member/")
public class MemberController {
	
	private static final Logger log =LoggerFactory.getLogger(MemberController.class);
	
	@Autowired
	private MemberService memberService;
	
	@Autowired
	private BCryptPasswordEncoder pwdEncoder;   //鍮꾨�踰덊샇 �븫�샇�솕
	
	@Autowired
	private HttpSession session;     //濡쒓렇�씤,�옣諛붽뎄�땲 �젙蹂대�� �꽭�뀡�뿉 ���옣
	
	@GetMapping("term.do")
	public String agree(Model model, RedirectAttributes rttr) {
		rttr.addAttribute("msg","회원 약관에 동의하시기 바랍니다.");
		return "member/term";
	}
	
	@GetMapping("idCheck.do")
	public void idCheck(@RequestParam("id") String id,HttpServletResponse response, Model model)throws IllegalArgumentException, IOException {
		log.info("Controller Before id : {}", id);
		
		Member cus = memberService.getMember(id);
		
		boolean result;
		if(cus!=null) {
			result = false;
			log.info("Controller After id : {}", cus.getId());
		}else {
			result = true;
			log.info("Controller After id : {}", "guest");
		}
		JSONObject json = new JSONObject();
		json.put("data",  result);
		PrintWriter out = response.getWriter();
		out.println(json.toString());
	}
	
	@GetMapping("join.do")
	public String join(Model model, @ModelAttribute("member") Member member) {
		model.addAttribute("member",member);
		return "member/join";
	}
	
	@PostMapping("joinpro.do")
	public String joinpro(HttpServletRequest request, Model model, RedirectAttributes rttr) {
		Member member = new Member();
		member.setId(request.getParameter("id"));
		member.setPw(pwdEncoder.encode(request.getParameter("pw")));
		member.setName(request.getParameter("name"));
		member.setAge(Integer.parseInt(request.getParameter("age")));
		member.setGender(request.getParameter("gender"));
		member.setTel(request.getParameter("tel"));
		member.setEmail(request.getParameter("email"));
		member.setAddr1(request.getParameter("addr1"));
		member.setAddr2(request.getParameter("addr2"));
		member.setPostcode(request.getParameter("postcode"));
		member.setResdate(request.getParameter("resdate"));
		member.setRcnt(Integer.parseInt(request.getParameter("rcnt")));
		member.setPoint(Integer.parseInt(request.getParameter("point")));  //HttpServletRequest 媛믪쓣 媛��졇�삱�뻹 Int�뒗 �씠�윴�떇�쑝濡� �옉�꽦
		memberService.insMember(member);
		model.addAttribute("msg","회원가입을 축하합니다.");
		return "redirect:/";
	}
	
	@GetMapping("login.do")
	public String login(Model model) {
		return "member/login";
	}
	
	@PostMapping("loginpro.do")
	public String loginpro(@RequestParam("id")String id,@RequestParam("pw") String pw,Model model, RedirectAttributes rttr) {
		session.invalidate();  //紐⑤뱺 �꽭�뀡 �뜲�씠�꽣媛� �궘�젣�릺怨�, �깉濡쒖슫 �꽭�뀡�씠 �깮�꽦�맗�땲�떎. 二쇰줈 �궗�슜�옄媛� 濡쒓렇�븘�썐�븷 �븣 �궗�슜�맗�땲�떎.
		Member cus = memberService.getMember(id);
		boolean loginSuccess= pwdEncoder.matches(pw, cus.getPw());
		if(loginSuccess) {
			session.setAttribute("cus", cus);
			session.setAttribute("sid", id);
			session.setAttribute("spw",pw);
			session.setAttribute("sname", cus.getName());
			session.setAttribute("smember", cus);
			session.setAttribute("cus", cus);
			model.addAttribute("msg","濡쒓렇�씤 �꽦怨�");
			return "redirect:/";  //  /�쓣 �넻�빐 硫붿씤�솕硫댁쑝濡� �씠�룞�븳�떎.
		}else {
			rttr.addAttribute("msg","濡쒓렇�씤 �떎�뙣");
			return "redirect:login,do";
		}
	}
	
	@GetMapping("logout.do")
	public String logout(Model model, RedirectAttributes rttr) {
		session.invalidate();
		model.addAttribute("msg", "濡쒓렇�븘�썐 �릺�뿀�뒿�땲�떎.");
		return "redirect:/";
	}
	
	@GetMapping("myInfo.do")
	public String myInfo(Model model) {
		return "member/myInfo";
	}
	
	@GetMapping("myUpdate.do")
	public String myUpdate(Model model) {
		return "member/myUpdate";
	}
	
	@PostMapping("myUpdatePro.do")
	public String myUpdatePro(HttpServletRequest request, Model model, RedirectAttributes rttr) {
		Member member = new Member();
		member.setId(request.getParameter("id"));
		member.setPw(pwdEncoder.encode(request.getParameter("pw")));
		member.setName(request.getParameter("name"));
		member.setAge(Integer.parseInt(request.getParameter("age")));
		member.setGender(request.getParameter("gender"));
		member.setTel(request.getParameter("tel"));
		member.setEmail(request.getParameter("email"));
		member.setAddr1(request.getParameter("addr1"));
		member.setAddr2(request.getParameter("addr2"));
		member.setPostcode(request.getParameter("postcode"));
		member.setResdate(request.getParameter("resdate"));
		member.setRcnt(Integer.parseInt(request.getParameter("rcnt")));
		member.setPoint(Integer.parseInt(request.getParameter("point")));  //HttpServletRequest 媛믪쓣 媛��졇�삱�뻹 Int�뒗 �씠�윴�떇�쑝濡� �옉�꽦
		memberService.insMember(member);
		model.addAttribute("msg","�젙蹂대�� �닔�젙�뻽�뒿�땲�떎..");
		return "redirect:/";
	}

	
	@GetMapping("memberDelete.do")
	public String memberDelete(@RequestParam("id") String id,Model model) {
		memberService.delMember(id);
		session.invalidate();
		return "redirect:/";
	}
}
